<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
 <title>
  Java Practices -&gt; Always close streams
 </title>
 <link rel="stylesheet" type="text/css" href="Java%20Practices%20-%29%20Always%20close%20streams_files/stylesheet9.css" media="all">
 
 <link rel="shortcut icon" href="http://www.javapractices.com/images/favicon.ico;jsessionid=B87AF4C892B701E38B7DF44583084813" type="image/vnd.microsoft.icon">
 <meta name="description" content="Concise presentations of java programming practices, tasks, and conventions, amply illustrated with syntax highlighted code examples.">
 
 <meta name="keywords" content="finally,flush,java.io,streams,java,java programming,java practices,java idiom,java style,java design patterns,java coding conventions,">
 
 
</head>
 
<body>


<div class="menu-bar">
 
  <a href="http://www.javapractices.com/home/HomeAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813" title="Table of Contents">Home</a> |
  <a href="http://www.javapractices.com/vote/VoteSummaryAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813" title="View Poll Results">Poll</a> |
   
  <a href="http://www.javapractices.com/feedback/FeedbackAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813?Operation=Show" title="Send Your Feedback">Wiki</a> |
  <b><a href="http://www.javapractices.com/source/SourceAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813" title="Grab Source Code">Source Code</a></b><img class="no-margin" src="Java%20Practices%20-%29%20Always%20close%20streams_files/goldstar.gif" alt=""> |

  <a href="http://www.web4j.com/Java_Web_Application_Framework_Overview.jsp?From=1" title="Free Download - Java Web Application Framework"><b>WEB4J</b></a> |
  
  <a href="http://www.formula4j.com/" title="Math expression parser"><b>Formula4J</b></a> |

  <a href="http://www.amazon.com/exec/obidos/ASIN/0321356683/ref=nosim/javapractices-20"><b>Effective Java</b></a> |

   <a href="http://www.javapractices.com/references/ReferencesAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813" title="References">Links</a>
   
  <form action="/search/SearchAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813" method="get" class="search-form">
   <input name="SearchTerms" size="12" maxlength="50" class="search" type="text">
   <input value="Search" type="submit">
  </form>
 
</div>

<p>





  

 






</p><p class="display-messages">

 

 

</p>


<div class="main-layout">
 
   

 




<div class="page-title">Always close streams</div>

<div class="main-body">
 
<br>When you use the 
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html">try-with-resources</a> 
statement correctly, then you will never have to close streams explicitly.
(Indeed, that's the reason try-with-resources was added in the first place.)
 
<p>However, you may see still see code that either doesn't use a modern JDK, or 
fails to take advantage of try-with-resources.

</p><p><b>JDK &lt; 7</b>

</p><p>Streams represent resources which you must always clean up explicitly,
by calling the <tt>close</tt> method.
</p><p>Some <code>java.io</code> classes (apparently just the output classes)
include a <code>flush</code> method. When a <tt>close</tt> method
is called on a such a class, it automatically performs a <tt>flush</tt>.
There is no need to explicitly call
<tt>flush</tt> before calling <tt>close</tt>.
</p><p>One stream can be chained to another by passing it to the constructor of
some second stream. When this second stream is closed, then it automatically
closes the original underlying stream as well.
</p><p>If multiple streams are chained together, then closing the one which
was the last to be constructed, and is thus at the highest level of abstraction,
will automatically close all the underlying streams. So, one only has to
call
<tt>close</tt> on one stream in order to close (and flush, if applicable)
an entire series of related streams.
</p><p><b>Example</b>
<br>
</p><pre>
<span class="keyword">import</span> java.io.*;
<span class="keyword">import</span> java.util.*;
<span class="keyword">import</span> java.util.logging.*;

<span class="comment">/** JDK before version 7. */</span>
<span class="keyword">public</span> <span class="keyword">class</span> ExerciseSerializable {

  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String... aArguments) {
    <span class="comment">//create a Serializable List
</span>    List&lt;String&gt; quarks = Arrays.asList(
      <span class="literal">"up"</span>, <span class="literal">"down"</span>, <span class="literal">"strange"</span>, <span class="literal">"charm"</span>, <span class="literal">"top"</span>, <span class="literal">"bottom"</span>
    );

    <span class="comment">//serialize the List
</span>    <span class="comment">//note the use of abstract base class references
</span>
    <span class="keyword">try</span>{
      <span class="comment">//use buffering
</span>      OutputStream file = <span class="keyword">new</span> FileOutputStream(<span class="literal">"quarks.ser"</span>);
      OutputStream buffer = <span class="keyword">new</span> BufferedOutputStream(file);
      ObjectOutput output = <span class="keyword">new</span> ObjectOutputStream(buffer);
      <span class="keyword">try</span>{
        output.writeObject(quarks);
      }
      <span class="keyword">finally</span>{
        output.close();
      }
    }  
    <span class="keyword">catch</span>(IOException ex){
      fLogger.log(Level.SEVERE, <span class="literal">"Cannot perform output."</span>, ex);
    }

    <span class="comment">//deserialize the quarks.ser file
</span>    <span class="comment">//note the use of abstract base class references
</span>    
    <span class="keyword">try</span>{
      <span class="comment">//use buffering
</span>      InputStream file = <span class="keyword">new</span> FileInputStream(<span class="literal">"quarks.ser"</span>);
      InputStream buffer = <span class="keyword">new</span> BufferedInputStream(file);
      ObjectInput input = <span class="keyword">new</span> ObjectInputStream (buffer);
      <span class="keyword">try</span>{
        <span class="comment">//deserialize the List
</span>        List&lt;String&gt; recoveredQuarks = (List&lt;String&gt;)input.readObject();
        <span class="comment">//display its data
</span>        <span class="keyword">for</span>(String quark: recoveredQuarks){
          System.out.println(<span class="literal">"Recovered Quark: "</span> + quark);
        }
      }
      <span class="keyword">finally</span>{
        input.close();
      }
    }
    <span class="keyword">catch</span>(ClassNotFoundException ex){
      fLogger.log(Level.SEVERE, <span class="literal">"Cannot perform input. Class not found."</span>, ex);
    }
    <span class="keyword">catch</span>(IOException ex){
      fLogger.log(Level.SEVERE, <span class="literal">"Cannot perform input."</span>, ex);
    }
  }

  <span class="comment">// PRIVATE 
</span>
  <span class="comment">//Use Java's logging facilities to record exceptions.
</span>  <span class="comment">//The behavior of the logger can be configured through a
</span>  <span class="comment">//text file, or programmatically through the logging API.
</span>  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger fLogger =
    Logger.getLogger(ExerciseSerializable.<span class="keyword">class</span>.getPackage().getName())
  ;
} 
</pre>
<br>
<br>
<br>

</div>




<div class="topic-section">See Also :</div>
<div class="main-body">
 
  
  <a href="http://www.javapractices.com/topic/TopicAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813?Id=25">Finally and catch</a> <br>
 
  
  <a href="http://www.javapractices.com/topic/TopicAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813?Id=42">Reading and writing text files</a> <br>
 
  
  <a href="http://www.javapractices.com/topic/TopicAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813?Id=43">Recovering resources</a> <br>
 
</div>


<div class="topic-section">Would you use this technique?</div>
<div class="main-body">
  
  <form action="/vote/AddVoteAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813" method="post">
    Yes<input name="Choice" value="Y" type="radio">
    &nbsp;&nbsp;No<input name="Choice" value="N" type="radio">
    &nbsp;&nbsp;Undecided<input name="Choice" value="?" type="radio">
    &nbsp;&nbsp;<input value="Vote" type="submit">
    <input name="Operation" value="Apply" type="hidden">
    <input name="TopicId" value="8" type="hidden">
  </form>
</div>

<div style="height:10.0em;"></div>

 
 
</div>

  

 





<div class="legalese" align="center">  
Â© 2014 Hirondelle Systems |
<a href="http://www.javapractices.com/source/SourceAction.do;jsessionid=B87AF4C892B701E38B7DF44583084813"><b>Source Code</b></a><img class="no-margin" src="Java%20Practices%20-%29%20Always%20close%20streams_files/goldstar.gif" alt=""> |
<a href="mailto:webmaster@javapractices.com">Contact</a> |
<a href="http://creativecommons.org/licenses/by-nc-sa/1.0/">License</a> |
<a href="http://www.javapractices.com/apps/cjp.rss;jsessionid=B87AF4C892B701E38B7DF44583084813">RSS</a>
<!-- ukey="2AC36CD2" -->
<!-- ckey="16DF3D87" -->
<br>

 Individual code snippets can be used under this <a href="http://www.javapractices.com/LICENSE.txt">BSD license</a> - Last updated on September 21, 2013.<br>
 Over 2,000,000 unique IPs last year - <span title="Java Practices 2.6.5, Mon May 16 00:00:00 EDT 2011">Built with</span> <a href="http://www.web4j.com/">WEB4J</a>.<br>
 - In Memoriam : Bill Dirani -
</div>

<script src="Java%20Practices%20-%29%20Always%20close%20streams_files/analytics.js" async=""></script><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-2633428-1', 'auto');
  ga('send', 'pageview');

</script>




</body></html>